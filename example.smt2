; Lati
(declare-const r0 Int)
(declare-const r1 Int)
(declare-const r2 Int)
(declare-const r3 Int)
(declare-const r4 Int)
(declare-const u0 Int)
(declare-const u1 Int)
(declare-const u2 Int)
(declare-const u3 Int)
(declare-const u4 Int)
(declare-const l0 Int)
(declare-const l1 Int)
(declare-const l2 Int)
(declare-const l3 Int)
(declare-const l4 Int)
(declare-const d0 Int)
(declare-const d1 Int)
(declare-const d2 Int)
(declare-const d3 Int)
(declare-const d4 Int)

; Grattacieli
(declare-const r0c0 Int)
(declare-const r0c1 Int)
(declare-const r0c2 Int)
(declare-const r0c3 Int)
(declare-const r0c4 Int)
(declare-const r1c0 Int)
(declare-const r1c1 Int)
(declare-const r1c2 Int)
(declare-const r1c3 Int)
(declare-const r1c4 Int)
(declare-const r2c0 Int)
(declare-const r2c1 Int)
(declare-const r2c2 Int)
(declare-const r2c3 Int)
(declare-const r2c4 Int)
(declare-const r3c0 Int)
(declare-const r3c1 Int)
(declare-const r3c2 Int)
(declare-const r3c3 Int)
(declare-const r3c4 Int)
(declare-const r4c0 Int)
(declare-const r4c1 Int)
(declare-const r4c2 Int)
(declare-const r4c3 Int)
(declare-const r4c4 Int)

; Grattacieli compresi tra 1 e n
(assert (and (< 0 r0c0) (< r0c0 6)))
(assert (and (< 0 r0c1) (< r0c1 6)))
(assert (and (< 0 r0c2) (< r0c2 6)))
(assert (and (< 0 r0c3) (< r0c3 6)))
(assert (and (< 0 r0c4) (< r0c4 6)))
(assert (and (< 0 r1c0) (< r1c0 6)))
(assert (and (< 0 r1c1) (< r1c1 6)))
(assert (and (< 0 r1c2) (< r1c2 6)))
(assert (and (< 0 r1c3) (< r1c3 6)))
(assert (and (< 0 r1c4) (< r1c4 6)))
(assert (and (< 0 r2c0) (< r2c0 6)))
(assert (and (< 0 r2c1) (< r2c1 6)))
(assert (and (< 0 r2c2) (< r2c2 6)))
(assert (and (< 0 r2c3) (< r2c3 6)))
(assert (and (< 0 r2c4) (< r2c4 6)))
(assert (and (< 0 r3c0) (< r3c0 6)))
(assert (and (< 0 r3c1) (< r3c1 6)))
(assert (and (< 0 r3c2) (< r3c2 6)))
(assert (and (< 0 r3c3) (< r3c3 6)))
(assert (and (< 0 r3c4) (< r3c4 6)))
(assert (and (< 0 r4c0) (< r4c0 6)))
(assert (and (< 0 r4c1) (< r4c1 6)))
(assert (and (< 0 r4c2) (< r4c2 6)))
(assert (and (< 0 r4c3) (< r4c3 6)))
(assert (and (< 0 r4c4) (< r4c4 6)))
; Niente ripetizioni sulle righe
(assert (distinct r0c0 r0c1 r0c2 r0c3 r0c4))
(assert (distinct r1c0 r1c1 r1c2 r1c3 r1c4))
(assert (distinct r2c0 r2c1 r2c2 r2c3 r2c4))
(assert (distinct r3c0 r3c1 r3c2 r3c3 r3c4))
(assert (distinct r4c0 r4c1 r4c2 r4c3 r4c4))
; Niente ripetizioni sulle colonne
(assert (distinct r0c0 r1c0 r2c0 r3c0 r4c0))
(assert (distinct r0c1 r1c1 r2c1 r3c1 r4c1))
(assert (distinct r0c2 r1c2 r2c2 r3c2 r4c2))
(assert (distinct r0c3 r1c3 r2c3 r3c3 r4c3))
(assert (distinct r0c4 r1c4 r2c4 r3c4 r4c4))

; Functions
(define-fun max ((a Int) (b Int)) Int (ite (> a b) a b))

(define-fun counter ((a0 Int) (a1 Int) (a2 Int) (a3 Int) (a4 Int)) Int
  (+ 1
     (ite (> a1 a0) 1 0)
     (ite (> a2 (max a1 a0)) 1 0)
     (ite (> a3 (max a2 (max a1 a0))) 1 0)
     (ite (> a4 (max a3 (max a2 (max a1 a0)))) 1 0)))

; Controlla che la griglia sia consistente
; Check right side
(assert (= r0 (counter r0c4 r0c3 r0c2 r0c1 r0c0)))
(assert (= r1 (counter r1c4 r1c3 r1c2 r1c1 r1c0)))
(assert (= r2 (counter r2c4 r2c3 r2c2 r2c1 r2c0)))
(assert (= r3 (counter r3c4 r3c3 r3c2 r3c1 r3c0)))
(assert (= r4 (counter r4c4 r4c3 r4c2 r4c1 r4c0)))
; Check up side
(assert (= u0 (counter r0c0 r1c0 r2c0 r3c0 r4c0)))
(assert (= u1 (counter r0c1 r1c1 r2c1 r3c1 r4c1)))
(assert (= u2 (counter r0c2 r1c2 r2c2 r3c2 r4c2)))
(assert (= u3 (counter r0c3 r1c3 r2c3 r3c3 r4c3)))
(assert (= u4 (counter r0c4 r1c4 r2c4 r3c4 r4c4)))
; Check left side
(assert (= l0 (counter r0c0 r0c1 r0c2 r0c3 r0c4)))
(assert (= l1 (counter r1c0 r1c1 r1c2 r1c3 r1c4)))
(assert (= l2 (counter r2c0 r2c1 r2c2 r2c3 r2c4)))
(assert (= l3 (counter r3c0 r3c1 r3c2 r3c3 r3c4)))
(assert (= l4 (counter r4c0 r4c1 r4c2 r4c3 r4c4)))
; Check down side
(assert (= d0 (counter r4c0 r3c0 r2c0 r1c0 r0c0)))
(assert (= d1 (counter r4c1 r3c1 r2c1 r1c1 r0c1)))
(assert (= d2 (counter r4c2 r3c2 r2c2 r1c2 r0c2)))
(assert (= d3 (counter r4c3 r3c3 r2c3 r1c3 r0c3)))
(assert (= d4 (counter r4c4 r3c4 r2c4 r1c4 r0c4)))

; Condizioni per la griglia
; Condizioni sui lati
(assert (= r2 2))
(assert (= u1 5))
(assert (= l1 3))
(assert (= d0 3))
(assert (= d3 4))
; Condizioni sui grattacieli
(assert (= r4c3 2))

(check-sat)
; (get-model)
